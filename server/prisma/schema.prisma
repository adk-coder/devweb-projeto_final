// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["debian-openssl-3.0.x"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  img        String
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  Workspace  Workspace[]
  members    Members[]

  @@map("user")
}

model Members {
  id            String     @id @default(uuid())
  userName      String?
  workspaceName String?
  admin         Boolean
  userId        String?
  workspaceId   String?
  Workspace     Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  User          User?      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
}

model Workspace {
  id           String      @id @default(uuid())
  title        String
  private      Boolean
  User         User?       @relation(fields: [owner], references: [id], onUpdate: Cascade)
  owner        String
  loadOrder    String      @db.MediumText
  chat         String      @db.MediumText
  notification String      @db.MediumText
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  members      Members[]
  Note         Note[]
  Table        Table[]
  Kanban       Kanban[]
  Youtube      Youtube[]
  CheckList    CheckList[]
  Image        Image[]

  @@map("workspace")
}

model Kanban {
  id          String    @id @default(uuid())
  Title       String
  metadata    String    @db.MediumText
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  Info        Info[]

  @@map("kanban")
}

model Info {
  id         String   @id @default(uuid())
  title      String
  kanban     Kanban   @relation(fields: [kanbanId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  kanbanId   String
  metadata   String   @db.MediumText
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("info")
}

model CheckList {
  id          String     @id @default(uuid())
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  workspaceId String?
  metadata    String     @db.MediumText

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("checklist")
}

model Note {
  id          String     @id @default(uuid())
  text        String     @db.MediumText
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  workspaceId String?
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt

  @@map("note")
}

model Image {
  id          String    @id @default(uuid())
  path        String    @db.Text
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String

  @@map("imagem")
}

model Youtube {
  id          String    @id @default(uuid())
  link        String    @db.Text
  Workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  @@map("youtube")
}

model Table {
  id          String     @id @default(uuid())
  tableName   String
  JsonString  String     @db.MediumText
  Workspace   Workspace? @relation(fields: [workspaceId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  workspaceId String

  @@map("table")
}
